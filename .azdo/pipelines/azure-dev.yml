trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - .azuredevops/*
      - src/server/*
      - src/client/ui/*
      - infra/*

pr:
  branches:
    include:
      - main
      - feat/*
      - fix/*
      - chore/*
      - refactor/*
  paths:
    include:
      - .azuredevops/*
      - src/server/*
      - src/client/ui/*
      - infra/*

parameters:
  - name: runAcceptanceTests
    displayName: "Enable Running Acceptance Tests"
    default: false
    type: boolean

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  registryName: acrfakesurveygenerator
  resourceGroupName: rg-fake-survey-generator
  azureResourceManagerConnection: "Azure Service Connection"
  location: "South Africa North"
  AZURE_CONTAINER_REGISTRY_ENDPOINT: $(registryName).azurecr.io
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
  - stage: BuildTestApi
    displayName: "Build + Test API"
    jobs:
      - job: VersionSetup
        displayName: "Set Version Tags"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path ./src/server nbgv --version 3.7.62-alpha
            displayName: Install NBGV tool

          - script: ./nbgv cloud -a
            workingDirectory: src/server
            displayName: Set Build Number & Version Variables

          - script: |
              echo "##vso[task.setvariable variable=VersionTag;isOutput=true]$(NBGV_SemVer1)"
            name: "SetVersionTag"
            displayName: "Set SemVer Version Tag from NBGV"

      - job: Build
        displayName: "Build + Test API"
        pool:
          vmImage: "ubuntu-latest"

        variables:
          buildConfiguration: "Release"

        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - script: |
              dotnet workload install aspire
            displayName: Install .NET Aspire Workload

          - task: Cache@2
            enabled: false
            displayName: Cache
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: "$(NUGET_PACKAGES)"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "--configuration $(buildConfiguration)"
              projects: |
                FakeSurveyGenerator.sln
            displayName: "Build Solution"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              publishTestResults: true
              arguments: '--no-restore --collect "XPlat Code Coverage"'
              projects: |
                src/server/FakeSurveyGenerator.Application.Tests
                src/server/FakeSurveyGenerator.Api.Tests.Integration
            displayName: "Run Unit + Integration Tests"

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
            displayName: "Publish Code Coverage Results"

          - script: |
              dotnet tool restore
              dotnet dotnet-ef migrations script --no-build --verbose -o DbMigrationScript.sql -i
            workingDirectory: src/server/FakeSurveyGenerator.Application
            displayName: "Create Database Migration Script"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "src/server/FakeSurveyGenerator.Application/DbMigrationScript.sql"
              artifact: "DbMigrationScript"
            displayName: "Publish Database Migration Script"

      # - job: Docker
      #   displayName: "Docker Preparation"
      #   dependsOn: VersionSetup
      #   pool:
      #     vmImage: "ubuntu-latest"
      #   variables:
      #     projectName: fake-survey-generator-api
      #     imageRepository: "$(registryName).azurecr.io/$(projectName)"
      #     semVerVersionTag: $[dependencies.VersionSetup.outputs['SetVersionTag.VersionTag']]
      #   steps:
      #     - task: Cache@2
      #       displayName: Cache Docker Image
      #       inputs:
      #         key: 'docker | "$(Agent.OS)" | cache'
      #         path: $(Pipeline.Workspace)/docker
      #         cacheHitVar: CACHE_RESTORED

      #     - script: |
      #         docker load -i $(Pipeline.Workspace)/docker/cache.tar
      #       displayName: Docker Restore
      #       condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

      #     - task: Docker@2
      #       displayName: "Build Docker Image"
      #       inputs:
      #         containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
      #         repository: "$(projectName)"
      #         command: "build"
      #         Dockerfile: "src/server/FakeSurveyGenerator.Api/Dockerfile"
      #         buildContext: "."
      #         arguments: "--build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $(imageRepository):latest"
      #         tags: |
      #           $(semVerVersionTag)
      #           latest

      #     - script: |
      #         mkdir -p $(Pipeline.Workspace)/docker
      #         docker save -o $(Pipeline.Workspace)/docker/cache.tar $(imageRepository):$(semVerVersionTag)
      #       displayName: Docker Save
      #       condition: and(not(canceled()), not(failed()), ne(variables.CACHE_RESTORED, 'true'))

      #     - task: Docker@2
      #       displayName: "Push Image to Azure Container Registry"
      #       condition: and(succeeded(), eq(variables.isMain, 'true'))
      #       inputs:
      #         containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
      #         repository: "$(projectName)"
      #         command: "push"
      #         tags: |
      #           $(semVerVersionTag)
      #           latest

      - job: AcceptanceTests
        displayName: "Run Acceptance (E2E) Tests"
        condition: ${{ eq(parameters.runAcceptanceTests, true) }} # .NET Aspire Tests hang in the pipeline so this is here until it is fixed
        pool:
          vmImage: "ubuntu-latest"

        variables:
          buildConfiguration: "Release"

        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - script: |
              dotnet workload install aspire
            displayName: Install .NET Aspire Workload

          - task: Cache@2
            enabled: false
            displayName: Cache
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: "$(NUGET_PACKAGES)"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "--configuration $(buildConfiguration)"
              projects: |
                FakeSurveyGenerator.sln
            displayName: "Build Solution"

          - task: PowerShell@2
            inputs:
              filePath: "src/server/FakeSurveyGenerator.Acceptance.Tests/bin/$(buildConfiguration)/net8.0/playwright.ps1"
              arguments: "install --with-deps"
            displayName: "Download Playwright Browsers"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              publishTestResults: true
              arguments: '--configuration $(buildConfiguration) --no-restore --collect "XPlat Code Coverage" --logger "console;verbosity=detailed"'
              projects: |
                src/server/FakeSurveyGenerator.Acceptance.Tests
            displayName: "Run Acceptance (E2E) Tests"

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
            displayName: "Publish Code Coverage Results"

  - stage: BuildUi
    displayName: "Build UI"
    dependsOn: []
    jobs:
      - job: Build
        pool:
          vmImage: "ubuntu-latest"
        variables:
          projectName: fake-survey-generator-ui
          imageRepository: "$(registryName).azurecr.io/$(projectName)"
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: DotNetCoreCLI@2
            displayName: Install NBGV tool
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path ./src/client/ui nbgv --version 3.7.62-alpha

          - script: ./nbgv cloud -a
            workingDirectory: src/client/ui
            displayName: Set Build Number & Version Variables

          - script: |
              echo "##vso[task.setvariable variable=VersionTag;isOutput=true]$(NBGV_SemVer1)"
            name: "SetVersionTag"
            displayName: "Set SemVer Version Tag from NBGV"

          # - task: Docker@2
          #   displayName: "Build Docker Image"
          #   inputs:
          #     containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
          #     repository: "$(projectName)"
          #     command: "build"
          #     Dockerfile: "src/client/ui/Dockerfile"
          #     buildContext: .
          #     arguments: "--build-arg VITE_APP_VERSION=$(SetVersionTag.VersionTag) --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $(imageRepository):latest"
          #     tags: |
          #       $(SetVersionTag.VersionTag)
          #       latest

          # - task: Docker@2
          #   displayName: "Push Image to Azure Container Registry"
          #   condition: and(succeeded(), eq(variables.isMain, 'true'))
          #   inputs:
          #     containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
          #     repository: "$(projectName)"
          #     command: "push"
          #     tags: |
          #       $(SetVersionTag.VersionTag)
          #       latest

  - stage: App_Deployment
    condition: and(succeeded(), eq(variables.isMain, true))
    dependsOn:
      - BuildTestApi
      - BuildUi
    displayName: "Deploy App"
    jobs:
      - job: Deploy
        displayName: "Deploy App"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          apiSemVerVersionTag: $[stageDependencies.BuildTestApi.VersionSetup.outputs['SetVersionTag.VersionTag']]
          uiSemVerVersionTag: $[stageDependencies.BuildUi.Build.outputs['SetVersionTag.VersionTag']]
        steps:
          - task: setup-azd@0
            displayName: Install azd

          - pwsh: |
              azd config set auth.useAzCliAuth "true"
            displayName: Configure AZD to Use AZ CLI Authentication

          - task: AzureCLI@2
            displayName: Provision Infrastructure
            inputs:
              azureSubscription: $(azureResourceManagerConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                azd provision --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
              AZURE_ENV_NAME: $(AZURE_ENV_NAME)
              AZURE_LOCATION: $(AZURE_LOCATION)

          # - task: AzureCLI@2
          #   displayName: Deploy Application
          #   inputs:
          #     azureSubscription: $(azureResourceManagerConnection)
          #     scriptType: bash
          #     scriptLocation: inlineScript
          #     inlineScript: |
          #       azd deploy --no-prompt
          #   env:
          #     AZURE_SUBSCRIPTION_ID: $(AZURE_SUBSCRIPTION_ID)
          #     AZURE_ENV_NAME: $(AZURE_ENV_NAME)
          #     AZURE_LOCATION: $(AZURE_LOCATION)

  - stage: Database_Deployment
    condition: and(succeeded(), eq(variables.isMain, true))
    dependsOn:
      - App_Deployment
    displayName: "Deploy Database"
    jobs:
      - deployment: Deployment_Job
        displayName: Deploy Fake Survey Generator Database
        pool:
          vmImage: "windows-latest"
        variables:
          sqlServerName: "sql-marcel-michau.database.windows.net"
          sqlDatabaseName: sqldb-fake-survey-generator
        environment: "azure-sql"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: SqlAzureDacpacDeployment@1
                  displayName: "Execute SQL Migration Script"
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    AuthenticationType: "servicePrincipal"
                    ServerName: "$(sqlServerName)"
                    DatabaseName: "$(sqlDatabaseName)"
                    deployType: SqlTask
                    SqlFile: "$(Pipeline.Workspace)/DbMigrationScript/DbMigrationScript.sql"
                    IpDetectionMethod: "AutoDetect"
