trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - .azdo/*
      - src/server/*
      - src/client/ui/*
      - infra/*

pr:
  branches:
    include:
      - main
      - feat/*
      - fix/*
      - chore/*
      - refactor/*
  paths:
    include:
      - .azdo/*
      - src/server/*
      - src/client/ui/*
      - infra/*

parameters:
  - name: runAcceptanceTests
    displayName: "Enable Running Acceptance Tests"
    default: false
    type: boolean

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  azureSubscriptionId: $(AZURE_SUBSCRIPTION_ID)
  azureEnvName: "dev"
  azureResourceGroup: rg-fake-survey-generator
  azureResourceManagerConnection: "Azure Service Connection"
  azureLocation: "South Africa North"
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
  - stage: BuildTestApi
    displayName: "Build + Test API"
    jobs:
      - job: VersionSetup
        displayName: "Set Version Tags"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path ./src/server nbgv --version 3.7.112
            displayName: Install NBGV tool

          - script: ./nbgv cloud -a
            workingDirectory: src/server
            displayName: Set Build Number & Version Variables

          - script: |
              echo "##vso[task.setvariable variable=VersionTag;isOutput=true]$(NBGV_SemVer1)"
            name: "SetVersionTag"
            displayName: "Set SemVer Version Tag from NBGV"

      - job: Build
        displayName: "Build + Test"
        pool:
          vmImage: "ubuntu-latest"

        variables:
          buildConfiguration: "Release"

        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: Cache@2
            enabled: false
            displayName: Cache
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: "$(NUGET_PACKAGES)"

          - pwsh: |
              dotnet build FakeSurveyGenerator.slnx --configuration $(buildConfiguration)
            displayName: "Build Solution"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              publishTestResults: true
              arguments: "--no-restore -- --coverage --report-trx"
              projects: |
                src/server/FakeSurveyGenerator.Application.Tests
                src/server/FakeSurveyGenerator.Api.Tests.Integration
            displayName: "Run Unit + Integration Tests"

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
            displayName: "Publish Code Coverage Results"

          - script: |
              dotnet tool restore
              dotnet dotnet-ef migrations script --no-build --verbose -o DbMigrationScript.sql -i
            workingDirectory: src/server/FakeSurveyGenerator.Application
            displayName: "Create Database Migration Script"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "src/server/FakeSurveyGenerator.Application/DbMigrationScript.sql"
              artifact: "DbMigrationScript"
            displayName: "Publish Database Migration Script"

      - job: AcceptanceTests
        displayName: "Run Acceptance (E2E) Tests"
        condition: ${{ eq(parameters.runAcceptanceTests, true) }} # .NET Aspire Tests hang in the pipeline so this is here until it is fixed
        pool:
          vmImage: "ubuntu-latest"

        variables:
          buildConfiguration: "Release"

        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: Cache@2
            enabled: false
            displayName: Cache
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: "$(NUGET_PACKAGES)"

          - pwsh: |
              dotnet build FakeSurveyGenerator.slnx --configuration $(buildConfiguration)
            displayName: "Build Solution"

          - task: PowerShell@2
            inputs:
              filePath: "src/server/FakeSurveyGenerator.Acceptance.Tests/bin/$(buildConfiguration)/net9.0/playwright.ps1"
              arguments: "install --with-deps"
            displayName: "Download Playwright Browsers"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              publishTestResults: true
              arguments: '--configuration $(buildConfiguration) --no-restore --collect "XPlat Code Coverage" --logger "console;verbosity=detailed"'
              projects: |
                src/server/FakeSurveyGenerator.Acceptance.Tests
            displayName: "Run Acceptance (E2E) Tests"

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
            displayName: "Publish Code Coverage Results"

  - stage: BuildUi
    displayName: "Build UI"
    dependsOn: []
    jobs:
      - job: Build
        pool:
          vmImage: "ubuntu-latest"
        variables:
          projectName: fake-survey-generator-ui
          imageRepository: "$(registryName).azurecr.io/$(projectName)"
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: DotNetCoreCLI@2
            displayName: Install NBGV tool
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path ./src/client/ui nbgv --version 3.7.112

          - script: ./nbgv cloud -a
            workingDirectory: src/client/ui
            displayName: Set Build Number & Version Variables

          - script: |
              echo "##vso[task.setvariable variable=VersionTag;isOutput=true]$(NBGV_SemVer1)"
            name: "SetVersionTag"
            displayName: "Set SemVer Version Tag from NBGV"

  - stage: App_Deployment
    displayName: "Deploy App"
    condition: and(succeeded(), eq(variables.isMain, true))
    dependsOn:
      - BuildTestApi
      - BuildUi
    jobs:
      - job: Deploy
        displayName: "Provision Infra + Deploy App"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          apiSemVerVersionTag: $[stageDependencies.BuildTestApi.VersionSetup.outputs['SetVersionTag.VersionTag']]
          uiSemVerVersionTag: $[stageDependencies.BuildUi.Build.outputs['SetVersionTag.VersionTag']]
        steps:
          - task: setup-azd@0
            displayName: Install azd

          - pwsh: |
              azd config set auth.useAzCliAuth "true"
            displayName: Configure AZD to Use AZ CLI Authentication

          - task: UseDotNet@2
            displayName: "Install .NET SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: AzureCLI@2
            displayName: Provision Infrastructure
            inputs:
              azureSubscription: $(azureResourceManagerConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                azd provision --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(azureSubscriptionId)
              AZURE_ENV_NAME: $(azureEnvName)
              AZURE_LOCATION: $(azureLocation)
              AZURE_RESOURCE_GROUP: $(azureResourceGroup)

          - task: AzureCLI@2
            displayName: Deploy Application
            inputs:
              azureSubscription: $(azureResourceManagerConnection)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                azd deploy --no-prompt
            env:
              AZURE_SUBSCRIPTION_ID: $(azureSubscriptionId)
              AZURE_ENV_NAME: $(azureEnvName)
              AZURE_LOCATION: $(azureLocation)
              AZURE_RESOURCE_GROUP: $(azureResourceGroup)
              UI_VERSION: $(uiSemVerVersionTag)
              API_VERSION: $(apiSemVerVersionTag)
              VITE_APP_VERSION: $(uiSemVerVersionTag)

  - stage: Database_Deployment
    condition: and(succeeded(), eq(variables.isMain, true))
    dependsOn:
      - App_Deployment
    displayName: "Deploy Database"
    jobs:
      - deployment: Deployment_Job
        displayName: Deploy Database Migration Script
        pool:
          vmImage: "windows-latest"
        variables:
          sqlServerName: "sql-fake-survey-generator.database.windows.net"
          sqlDatabaseName: sqldb-fake-survey-generator
        environment: "azure-sql"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: SqlAzureDacpacDeployment@1
                  displayName: "Execute SQL Migration Script"
                  inputs:
                    azureSubscription: $(azureResourceManagerConnection)
                    AuthenticationType: "servicePrincipal"
                    ServerName: "$(sqlServerName)"
                    DatabaseName: "$(sqlDatabaseName)"
                    deployType: SqlTask
                    SqlFile: "$(Pipeline.Workspace)/DbMigrationScript/DbMigrationScript.sql"
                    IpDetectionMethod: "AutoDetect"
