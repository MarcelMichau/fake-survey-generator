trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/client/ui/*
      - charts/fake-survey-generator-ui/*
      - build/fake-survey-generator-ui/*

pr:
  branches:
    include:
      - master
      - feat/*
      - fix/*
      - chore/*
      - refactor/*
  paths:
    include:
      - src/client/ui/*
      - charts/fake-survey-generator-ui/*
      - build/fake-survey-generator-ui/*

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  projectName: fake-survey-generator-ui
  registryName: acrfakesurveygenerator
  imageRepository: "$(registryName).azurecr.io/$(projectName)"
  resourceGroupName: rg-fake-survey-generator
  kubernetesClusterName: aks-cluster
  DOCKER_BUILDKIT: 1

stages:
  - stage: Build
    displayName: "Build"
    jobs:
      - job: Build
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - task: UseDotNet@2
            displayName: "Install .NET Core SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: DotNetCoreCLI@2
            displayName: Install NBGV tool
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path ./src/client/ui nbgv --version 3.3.37

          - script: ./nbgv cloud -a
            workingDirectory: src/client/ui
            displayName: Set Build Number & Version Variables

          - script: |
              echo "##vso[task.setvariable variable=VersionTag;isOutput=true]$($NBGV_SemVer1)"
            name: "SetVersionTag"
            displayName: "Set SemVer Version Tag from NBGV"

          - task: Docker@2
            displayName: "Build Docker Image"
            inputs:
              containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
              repository: "$(projectName)"
              command: "build"
              Dockerfile: "src/client/ui/Dockerfile"
              buildContext: .
              arguments: "--build-arg REACT_APP_VERSION=$(VersionTag) --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $(imageRepository):latest"
              tags: |
                $(VersionTag)
                latest

          - task: Docker@2
            displayName: "Push Image to Azure Container Registry"
            inputs:
              containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
              repository: "$(projectName)"
              command: "push"
              tags: |
                $(VersionTag)
                latest

  - stage: Publish
    displayName: "Publish"
    jobs:
      - job: Publish_Chart
        displayName: "Publish Fake Survey Generator UI Chart"
        pool:
          vmImage: "ubuntu-latest"
        variables:
          semVerVersionTag: $[stageDependencies.Build.Build.outputs['SetVersionTag.VersionTag']]
        steps:
          - task: HelmInstaller@1
            inputs:
              helmVersionToInstall: "3.5.3"
            displayName: "Install Helm"

          - task: HelmDeploy@0
            inputs:
              command: "package"
              chartPath: "charts/$(projectName)"
              chartVersion: "$(semVerVersionTag)"
              save: false
            displayName: "Helm Package"

          - task: AzureCLI@1
            inputs:
              azureSubscription: "Azure Service Connection"
              scriptLocation: "inlineScript"
              inlineScript: "az configure --defaults acr=$(registryName)"
            displayName: "Set Azure Container Registry Default in Azure CLI"

          - task: AzureCLI@1
            inputs:
              azureSubscription: "Azure Service Connection"
              scriptLocation: "inlineScript"
              inlineScript: "az acr helm repo add"
            displayName: "Add Azure Container Registry Repo to Azure CLI"

          - task: AzureCLI@1
            inputs:
              azureSubscription: "Azure Service Connection"
              scriptLocation: "inlineScript"
              inlineScript: "az acr helm push --force $(Build.ArtifactStagingDirectory)/$(projectName)-$(semVerVersionTag).tgz"
            displayName: "Push Helm Chart to Azure Container Registry"

  - stage: Application_Deployment
    condition: and(succeeded(), eq(variables.isMain, true))
    displayName: "Application Deployment"
    jobs:
      - deployment: Deployment_Job
        displayName: Deploy Fake Survey Generator UI
        pool:
          vmImage: "ubuntu-latest"
        variables:
          semVerVersionTag: $[stageDependencies.Build.Build.outputs['SetVersionTag.VersionTag']]
          environmentSuffix: prod
          ingressClusterIssuerName: letsencrypt
          ingressHost: aks.fakesurveygenerator.mysecondarydomain.com
          ingressTlsSecretName: marcelmichau-dev-tls-secret
          replicaCount: 1
          targetNamespace: prod-env
        environment: "aks"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: KubectlInstaller@0
                  displayName: "Install Kubectl latest"

                - task: HelmInstaller@1
                  inputs:
                    helmVersionToInstall: "3.5.3"
                  displayName: "Install Helm"

                - task: AzureCLI@1
                  inputs:
                    azureSubscription: "Azure Service Connection"
                    scriptLocation: "inlineScript"
                    inlineScript: "az configure --defaults acr=$(registryName)"
                  displayName: "Set Azure Container Registry Default in Azure CLI"

                - task: AzureCLI@1
                  inputs:
                    azureSubscription: "Azure Service Connection"
                    scriptLocation: "inlineScript"
                    inlineScript: "az acr helm repo add"
                  displayName: "Add Azure Container Registry Repo to Azure CLI"

                - task: HelmDeploy@0
                  displayName: "Deploy Fake Survey Generator UI using Helm"
                  inputs:
                    connectionType: "Azure Resource Manager"
                    azureSubscription: "Azure Service Connection"
                    azureResourceGroup: "$(resourceGroupName)"
                    kubernetesCluster: "$(kubernetesClusterName)"
                    namespace: "$(targetNamespace)"
                    command: "upgrade"
                    chartType: "Name"
                    chartName: "$(registryName)/$(projectName)"
                    releaseName: "$(projectName)-$(environmentSuffix)"
                    arguments: >-
                      --create-namespace
                      --version $(semVerVersionTag)
                      --set image.repository=$(imageRepository)
                      --set image.tag=$(semVerVersionTag)
                      --set ingress.hosts[0].host=$(ingressHost)
                      --set ingress.hosts[0].paths[0]=/
                      --set ingress.tls[0].secretName=$(ingressTlsSecretName)
                      --set ingress.tls[0].hosts={$(ingressHost)}
                      --set ingress.annotations."cert-manager\.io/cluster-issuer"=$(ingressClusterIssuerName)
                      --set replicaCount=$(replicaCount)
