trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - src/server/*
      - build/fake-survey-generator-api/*
      - build/infrastructure/modules/fake-survey-generator-managed-identity/*

pr:
  branches:
    include:
      - main
      - feat/*
      - fix/*
      - chore/*
      - refactor/*
  paths:
    include:
      - src/server/*
      - build/fake-survey-generator-api/*
      - build/infrastructure/modules/fake-survey-generator-managed-identity/*

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  projectName: fake-survey-generator-api
  registryName: acrfakesurveygenerator
  imageRepository: "$(registryName).azurecr.io/$(projectName)"
  resourceGroupName: rg-fake-survey-generator
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
  - stage: BuildTest
    displayName: "Build + Test"
    jobs:
      - job: VersionSetup
        displayName: "Set Version Tags"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: UseDotNet@2
            displayName: "Install .NET Core SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: DotNetCoreCLI@2
            inputs:
              command: custom
              custom: tool
              arguments: install --tool-path ./src/server nbgv --version 3.5.109
            displayName: Install NBGV tool

          - script: ./nbgv cloud -a
            workingDirectory: src/server
            displayName: Set Build Number & Version Variables

          - script: |
              echo "##vso[task.setvariable variable=VersionTag;isOutput=true]$(NBGV_SemVer1)"
            name: "SetVersionTag"
            displayName: "Set SemVer Version Tag from NBGV"

      - job: Build
        displayName: "Build + Test API"
        pool:
          vmImage: "ubuntu-latest"

        variables:
          buildConfiguration: "Release"

        steps:
          - task: UseDotNet@2
            displayName: "Install .NET Core SDK"
            inputs:
              packageType: "sdk"
              useGlobalJson: true

          - task: Cache@2
            displayName: Cache NuGet Packages
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
              path: $(NUGET_PACKAGES)

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "--configuration $(buildConfiguration)"
              projects: |
                FakeSurveyGenerator.sln
            displayName: "Build Solution"

          - task: DotNetCoreCLI@2
            inputs:
              command: "test"
              publishTestResults: true
              arguments: '--no-restore --collect "XPlat Code Coverage"'
              projects: |
                src/server/FakeSurveyGenerator.Domain.Tests
                src/server/FakeSurveyGenerator.Application.Tests
                src/server/FakeSurveyGenerator.API.Tests.Integration
            displayName: "Run Unit + Integration Tests"

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: "cobertura"
              summaryFileLocation: $(Agent.TempDirectory)/**/coverage.cobertura.xml
            displayName: "Publish Code Coverage Results"

          - script: |
              dotnet tool restore
              dotnet dotnet-ef migrations script -o DbMigrationScript.sql -i
            workingDirectory: src/server/FakeSurveyGenerator.EF.Design
            displayName: "Create Database Migration Script"

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "src/server/FakeSurveyGenerator.EF.Design/DbMigrationScript.sql"
              artifact: "DbMigrationScript"
            displayName: "Publish Database Migration Script"

      # - job: AcceptanceTest
      #   displayName: "Acceptance Tests"
      #   #         dependsOn: Build
      #   pool:
      #     vmImage: "ubuntu-latest"
      #   steps:
      #     - script: openssl version
      #       displayName: "Get openssl version"

      #     - script: sudo apt install libnss3-tools
      #       displayName: "Install certutil"

      #     - script: >
      #         /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      #       displayName: "Install Homebrew"

      #     - script: "brew install mkcert"
      #       displayName: "Install mkcert"

      #     - script: "mkcert -install localhost"
      #       workingDirectory: certs
      #       displayName: "Install localhost Certificate for tests"

      #     - task: UseDotNet@2
      #       displayName: "Install .NET SDK from global.json"
      #       inputs:
      #         packageType: "sdk"
      #         useGlobalJson: true

      #     - task: UseDotNet@2
      #       displayName: "Install .NET 5 SDK"
      #       inputs:
      #         packageType: "sdk"
      #         version: "5.0.x"

      #     - script: >
      #         sudo mkdir -p ~/.aspnet/https
      #       displayName: "Create .aspnet/https directory"

      #     - task: DotNetCoreCLI@2
      #       displayName: "Run dotnet dev-certs"
      #       inputs:
      #         command: custom
      #         custom: dev-certs
      #         arguments: "https -ep /tmp/.aspnet/https/FakeSurveyGenerator.API.pfx -p onlyfortesting"

      #     - script: "sudo cp /tmp/.aspnet/https/FakeSurveyGenerator.API.pfx ~/.aspnet/https/"
      #       displayName: "Copy Cert"

      #     #           - script: "sudo update-ca-certificates"
      #     #             displayName: "Run update-ca-certificates"

      #     #           - script: "ls -a ~/"
      #     #             displayName: "Check home directory"

      #     #           - script: "ls -a ~/.dotnet/"
      #     #             displayName: "Check .dotnet directory"

      #     #           - script: "ls -a ~/.aspnet/"
      #     #             displayName: "Check .aspnet directory"

      #     - script: "ls -a ~/.aspnet/https"
      #       displayName: "Check .aspnet/https directory"

      #     #           - script: "docker-compose -f docker-compose.yml -f docker-compose.override.linux.yml up"
      #     #             displayName: "Docker Compose Up"
      #     #             env:
      #     #               DOCKER_COMPOSE_CERTIFICATE_PASSWORD: $(dockerComposeCertificatePassword)

      #     - script: "dotnet tool install --global Microsoft.Playwright.CLI"
      #       displayName: "Install Playwright Global Tool"

      #     - task: Cache@2
      #       displayName: Cache NuGet Packages
      #       inputs:
      #         key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**'
      #         restoreKeys: |
      #           nuget | "$(Agent.OS)"
      #         path: $(NUGET_PACKAGES)

      #     - task: DotNetCoreCLI@2
      #       inputs:
      #         command: "build"
      #         workingDirectory: src/server/FakeSurveyGenerator.Acceptance.Tests
      #       displayName: "Build Tests Project"

      #     - script: "docker-compose build"
      #       displayName: "Docker Compose Build"

      #     - script: "playwright install"
      #       workingDirectory: src/server/FakeSurveyGenerator.Acceptance.Tests
      #       displayName: "Install Playwright Browsers"

      #     - task: DotNetCoreCLI@2
      #       inputs:
      #         command: "test"
      #         publishTestResults: true
      #         arguments: "--no-restore"
      #         workingDirectory: src/server/FakeSurveyGenerator.Acceptance.Tests
      #       env:
      #         DOCKER_COMPOSE_CERTIFICATE_PASSWORD: onlyfortesting
      #       displayName: "Run Acceptance Tests"

      - job: Docker
        displayName: "Docker Preparation"
        dependsOn: VersionSetup
        pool:
          vmImage: "ubuntu-latest"
        variables:
          semVerVersionTag: $[dependencies.VersionSetup.outputs['SetVersionTag.VersionTag']]
        steps:
          - task: Docker@2
            displayName: "Build Docker Image"
            inputs:
              containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
              repository: "$(projectName)"
              command: "build"
              Dockerfile: "src/server/FakeSurveyGenerator.API/Dockerfile"
              buildContext: "."
              arguments: "--build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $(imageRepository):latest"
              tags: |
                $(semVerVersionTag)
                latest

          - task: Docker@2
            displayName: "Push Image to Azure Container Registry"
            condition: and(succeeded(), eq(variables.isMain, 'true'))
            inputs:
              containerRegistry: "FakeSurveyGeneratorAzureContainerRegistry"
              repository: "$(projectName)"
              command: "push"
              tags: |
                $(semVerVersionTag)
                latest

  - stage: Database_Deployment
    condition: and(succeeded(), eq(variables.isMain, true))
    displayName: "Database Deployment"
    jobs:
      - deployment: Deployment_Job
        displayName: Deploy Fake Survey Generator Database
        pool:
          vmImage: "windows-latest"
        variables:
          sqlServerName: "sql-marcel-michau.database.windows.net"
          sqlDatabaseName: sqldb-fake-survey-generator
        environment: "azure-sql"
        strategy:
          runOnce:
            deploy:
              steps:
                - task: SqlAzureDacpacDeployment@1
                  displayName: "Execute SQL Migration Script"
                  inputs:
                    azureSubscription: "Azure Service Connection"
                    AuthenticationType: "servicePrincipal"
                    ServerName: "$(sqlServerName)"
                    DatabaseName: "$(sqlDatabaseName)"
                    deployType: "SqlTask"
                    SqlFile: "$(Pipeline.Workspace)/DbMigrationScript/DbMigrationScript.sql"
                    IpDetectionMethod: "AutoDetect"

  - stage: Application_Deployment
    dependsOn:
      - BuildTest
      - Database_Deployment
    condition: and(succeeded(), eq(variables.isMain, true))
    displayName: "Application Deployment"
    variables:
      identityProviderUrl: https://marcelmichau.eu.auth0.com/
      databaseServer: tcp:sql-marcel-michau.database.windows.net\,1433
      databaseName: sqldb-fake-survey-generator
      redisServer: redis-fake-survey-generator.redis.cache.windows.net:6380
      redisPassword: "$(prodEnvRedisPassword)"
      redisDefaultDatabase: 0
      azureKeyVaultName: kv-fake-survey-generator
      managedIdentityName: mi-fake-survey-generator
    jobs:
      - job: CreateIdentities
        displayName: Create Identities
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - script: az bicep build --file build/infrastructure/modules/fake-survey-generator-managed-identity/azuredeploy.bicep
            displayName: "Compile Fake Survey Generator Managed Identity Bicep to ARM"

          - task: AzureResourceManagerTemplateDeployment@3
            displayName: "Deploy Fake Survey Generator Managed Identity ARM Template"
            inputs:
              deploymentScope: "Resource Group"
              azureResourceManagerConnection: "Azure Service Connection"
              subscriptionId: "$(subscriptionId)"
              action: "Create Or Update Resource Group"
              resourceGroupName: "$(resourceGroupName)"
              location: "South Africa North"
              templateLocation: "Linked artifact"
              csmFile: "build/infrastructure/modules/fake-survey-generator-managed-identity/azuredeploy.json"
              deploymentMode: "Incremental"
              overrideParameters: >-
                -identityName "$(managedIdentityName)"
                -keyVaultName "$(azureKeyVaultName)"
              deploymentOutputs: createManagedIdentityArmOutput

          - task: PowerShell@2
            name: "SetOutputVariables"
            displayName: "Set Output Variables"
            inputs:
              targetType: "inline"
              script: |
                $armOutputObj = '$(createManagedIdentityArmOutput)' | ConvertFrom-Json
                $armOutputObj.PSObject.Properties | ForEach-Object {
                  $keyname = $_.Name
                  $value = $_.Value.value

                  ## Creates a standard pipeline variable
                  Write-Output "##vso[task.setvariable variable=$keyName;]$value"

                  ## Creates an output variable
                  Write-Output "##vso[task.setvariable variable=$keyName;isOutput=true]$value"
                }
              pwsh: true

      - deployment: Deployment_Job
        displayName: Deploy Fake Survey Generator API
        dependsOn:
          - CreateIdentities
        pool:
          vmImage: "ubuntu-latest"
        environment: "aca"
        variables:
          semVerVersionTag: $[stageDependencies.BuildTest.VersionSetup.outputs['SetVersionTag.VersionTag']]
          identityClientId: $[dependencies.CreateIdentities.outputs['SetOutputVariables.identityClientId']]
          identityResourceId: $[dependencies.CreateIdentities.outputs['SetOutputVariables.identityResourceId']]
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureCLI@1
                  inputs:
                    azureSubscription: "Azure Service Connection"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az extension add --name containerapp
                  displayName: "Install Azure CLI containerapp Extension"

                - task: AzureCLI@1
                  inputs:
                    azureSubscription: "Azure Service Connection"
                    scriptLocation: "inlineScript"
                    inlineScript: >-
                      az containerapp update
                        --name ca-$(projectName)
                        --resource-group $(resourceGroupName)
                        --image $(imageRepository):$(semVerVersionTag)
                        --set-env-vars
                        ASPNETCORE_ENVIRONMENT=Production
                        Cache__RedisDefaultDatabase=$(redisDefaultDatabase)
                        Cache__RedisPassword=$(redisPassword)
                        Cache__RedisSsl=true
                        Cache__RedisUrl=$(redisServer)
                        ConnectionStrings__SurveyContext=Server=$(databaseServer);Initial Catalog=$(databaseName);Persist Security Info=False;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;Authentication=Active Directory Managed Identity;User Id=$(identityClientId);
                        IDENTITY_PROVIDER_URL=$(identityProviderUrl)
                  displayName: "Update Container App"
